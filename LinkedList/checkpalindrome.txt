import java.util.*;
import java.lang.*;
import java.io.*;

// The main method must be in a class named "Main"

class Node {
  int data;
  Node next;
  public static Node head = null;

  Node(int data) {
    this.data = data;
    this.next = null;
  }

  public static void print() {

    Node currNode = head;

    while (currNode != null) {
      System.out.print(currNode.data + " ");
      currNode = currNode.next;
    }
  }

  public static void insertAtHead(int data) {

    Node newNode = new Node(data);

    newNode.next = head;

    head = newNode;
  }

  public static void insertAtTail(int data) {

    Node newNode = new Node(data);

    Node currNode = head;

    while(currNode.next != null) {
      currNode = currNode.next;
    }

    currNode.next = newNode;
  }

  public static Node reversePrint(Node head) {

    if(head == null || head.next == null) {
      return head;
    }

    Node rest = reversePrint(head.next);

    head.next.next = head;
    head.next = null;

    return rest;
  }

  public static Node reverseLinkedListIteratively(Node node) {

    Node prev = null;
    Node current = node;
    Node next = null;
    while (current != null) {
      next = current.next;
      current.next = prev;
      prev = current;
      current = next;
    }
    node = prev;
    return node;
  }

  public static Node getMiddleNode() {
    Node slow = head;
    Node fast = head.next;

    while (slow != null && fast != null) {

      fast = fast.next;
      if (fast != null) {
        fast = fast.next;
        slow = slow.next;
      }
    }
    return slow;
  }

  public static boolean checkPalindrome() {

    // find middle node
    Node middleNode = getMiddleNode();
    // reverse node after middle node
    Node reverseLinkedList = reverseLinkedListIteratively(middleNode.next);

    // compare t1 & t2
    while (head != null && reverseLinkedList != null) {

      if(head.data != reverseLinkedList.data) {
        return false;
      }
      
      head = head.next;
      reverseLinkedList = reverseLinkedList.next;
    }

    return true;
  }
}
class Main {
    public static void main(String[] args) {
      
      Node.insertAtHead(1);
      Node.insertAtTail(2);
      Node.insertAtTail(2);
      Node.insertAtTail(3);
      Node.insertAtTail(4);
      Node.insertAtTail(4);
      Node.print();
      System.out.println();
      // Node.head = Node.reverseLinkedListIteratively(Node.head);
      // Node.print();
      // System.out.println(Node.checkPalindrome());
      // System.out.println(Node.getMiddleNode());
      Node.removeDuplicates();
      Node.print();
    }
}
