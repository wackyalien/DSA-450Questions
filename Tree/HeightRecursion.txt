import java.util.*;
import java.lang.*;
import java.io.*;
import java.util.Scanner;

class Main {
  public static void main(String[] args) {
    Scanner input = new Scanner(System.in);
    System.out.println("Enter root node data :: ");

    int rootNode = input.nextInt();

    Node root = Node.buildTree(rootNode);

    // Node.levelOrderTraversal(root);
    System.out.println(Node.height(root));
    // Node.height(root);
  }
}

class Node {

  int data;
  Node left;
  Node right;

  Node(int data) {
    this.data = data;
    this.left = null;
    this.right = null;
  }

  public static Node buildTree(int data) {

    if(data == -1) {
      return null;
    }

    Node root = new Node(data);

    Scanner input = new Scanner(System.in);

    // left node build
    System.out.println("Enter left node data :: ");
    int leftData = input.nextInt();
    root.left = buildTree(leftData);

    // right node build
    System.out.println("Enter right node data :: ");
    int rightData = input.nextInt();
    root.right = buildTree(rightData);

    return root;
  }

  public static void levelOrderTraversal(Node root) {

    Queue<Node> q = new LinkedList();

    q.add(root);
    q.add(null);

    while(!q.isEmpty()) {

      Node temp = q.peek();
      q.remove();

      if (temp == null) {
        System.out.println();

        if(!q.isEmpty()) {
          q.add(null);
        }
      } else {
        System.out.print(temp.data+ " ");

        if(temp.left != null) {
          q.add(temp.left);
        }
  
        if(temp.right != null) {
          q.add(temp.right);
        }
      }
    }
  }

  public static void inOrder(Node root) {

    if(root == null) {
      return;
    }
    //access left node
    inOrder(root.left);

    System.out.print(root.data + " ");

    inOrder(root.right);
  }

  public static void preOrder(Node root) {

    if(root == null) {
      return;
    }

    System.out.print(root.data + " ");

    preOrder(root.left);

    preOrder(root.right);
  }

  public static void postOrder(Node root) {

    if(root == null) {
      return;
    }
    
    postOrder(root.left);

    postOrder(root.right);

    System.out.print(root.data + " ");
  }

  public static int height(Node root) {

    if (root == null) {
      return 0;
    }

    int leftHeight = height(root.left);
    int rightHeight = height(root.right);

    int ans = Math.max(leftHeight, rightHeight)+1;

    return ans;
  }
}